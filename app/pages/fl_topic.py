import streamlit as st
from gtts import gTTS
from streamlit_mic_recorder import mic_recorder
import io
from openai import OpenAI

# ------------------------------------
# ЁЯза INITIAL SETUP
# ------------------------------------
st.set_page_config(page_title="Finance Tutor", layout="wide")

if "user_name" not in st.session_state:
    st.session_state.user_name = "Lohith"
if "selected_topic" not in st.session_state:
    st.session_state.selected_topic = ("Finance Fundamentals", 0, "Introduction to Finance")
if "quiz_completed" not in st.session_state:
    st.session_state.quiz_completed = False
if "messages" not in st.session_state:
    st.session_state.messages = []
if "language" not in st.session_state:
    st.session_state.language = "english"  # english, telugu, hindi, tamil, kannada

# ------------------------------------
# ЁЯМР TRANSLATION DICTIONARY
# ------------------------------------
translations = {
    "english": {
        "welcome": "Welcome",
        "learning_material": "Learning Material",
        "topic_intro": "This is where the learning content for this topic will appear тАФ videos, notes, or quizzes.",
        "take_quiz": "Take Quiz",
        "quiz_completed": "Quiz completed! You can proceed to the next topic.",
        "next": "Next",
        "previous": "Previous",
        "back": "Back to Dashboard",
        "speak_button": "ЁЯФК Listen to Lesson",
        "mic_button": "ЁЯОЩя╕П Speak to Chatbot",
    },
    "р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)": {
        "welcome": "р░╕р▒Нр░╡р░╛р░Чр░др░В",
        "learning_material": "р░кр░╛р░ар▒Нр░пр░╛р░Вр░╢р░В",
        "topic_intro": "р░И р░Ер░Вр░╢р░╛р░ир░┐р░Хр░┐ р░╕р░Вр░мр░Вр░зр░┐р░Вр░Ър░┐р░и р░╡р▒Ар░бр░┐р░пр▒Лр░▓р▒Б, р░Чр░ор░ир░┐р░Хр░▓р▒Б р░▓р▒Зр░жр░╛ р░Хр▒Нр░╡р░┐р░Ьр▒НтАМр░▓р▒Б р░Зр░Хр▒Нр░Хр░б р░Хр░ир░┐р░кр░┐р░╕р▒Нр░др░╛р░пр░┐.",
        "take_quiz": "р░Хр▒Нр░╡р░┐р░Ьр▒Н р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐",
        "quiz_completed": "р░Хр▒Нр░╡р░┐р░Ьр▒Н р░кр▒Вр░░р▒Нр░др░пр░┐р░Вр░жр░┐! р░др░жр▒Бр░кр░░р░┐ р░Ер░Вр░╢р░╛р░ир░┐р░Хр░┐ р░╡р▒Жр░│р▒Нр░│р░╡р░Ър▒Нр░Ър▒Б.",
        "next": "р░др░░р▒Нр░╡р░╛р░д",
        "previous": "р░ор▒Бр░ир▒Бр░кр░Яр░┐",
        "back": "р░бр░╛р░╖р▒НтАМр░мр▒Лр░░р▒Нр░бр▒НтАМр░Хр░┐ р░др░┐р░░р░┐р░Чр░┐",
        "speak_button": "ЁЯФК р░кр░╛р░ар░╛р░ир▒Нр░ир░┐ р░╡р░┐р░ир░Вр░бр░┐",
        "mic_button": "ЁЯОЩя╕П р░мр░╛р░Яр▒НтАМр░др▒Л р░ор░╛р░Яр▒Нр░▓р░╛р░бр░Вр░бр░┐",
    },
    "рд╣рд┐рдВрджреА (Hindi)": {
        "welcome": "рд╕реНрд╡рд╛рдЧрдд рд╣реИ",
        "learning_material": "рдЕрдзреНрдпрдпрди рд╕рд╛рдордЧреНрд░реА",
        "topic_intro": "рдпрд╣рд╛рдБ рдЗрд╕ рд╡рд┐рд╖рдп рдХреА рд╕рд╛рдордЧреНрд░реА рджрд┐рдЦрд╛рдИ рджреЗрдЧреА тАФ рд╡реАрдбрд┐рдпреЛ, рдиреЛрдЯреНрд╕ рдпрд╛ рдХреНрд╡рд┐рдЬрд╝ред",
        "take_quiz": "рдХреНрд╡рд┐рдЬрд╝ рд╢реБрд░реВ рдХрд░реЗрдВ",
        "quiz_completed": "рдХреНрд╡рд┐рдЬрд╝ рдкреВрд░рд╛ рд╣реБрдЖ! рдЕрдм рдЖрдк рдЕрдЧрд▓реЗ рд╡рд┐рд╖рдп рдкрд░ рдЬрд╛ рд╕рдХрддреЗ рд╣реИрдВред",
        "next": "рдЕрдЧрд▓рд╛",
        "previous": "рдкрд┐рдЫрд▓рд╛",
        "back": "рдбреИрд╢рдмреЛрд░реНрдб рдкрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдВ",
        "speak_button": "ЁЯФК рдкрд╛рда рд╕реБрдиреЗрдВ",
        "mic_button": "ЁЯОЩя╕П рдЪреИрдЯрдмреЙрдЯ рд╕реЗ рдмрд╛рдд рдХрд░реЗрдВ",
    },
    "родрооро┐ро┤рпН (Tamil)": {
        "welcome": "ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН",
        "learning_material": "роХро▒рпНро▒ро▓рпН роЙро│рпНро│роЯроХрпНроХроорпН",
        "topic_intro": "роЗроирпНрод родро▓рпИрокрпНрокрпБроХрпНроХро╛рой ро╡рпАроЯро┐ропрпЛроХрпНроХро│рпН, роХрпБро▒ро┐рокрпНрокрпБроХро│рпН роЕро▓рпНро▓родрпБ ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛ роЗроЩрпНроХрпЗ родрпЛройрпНро▒рпБроорпН.",
        "take_quiz": "ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛ родрпКроЯроЩрпНроХро╡рпБроорпН",
        "quiz_completed": "ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛ роорпБроЯро┐роирпНродродрпБ! роЕроЯрпБродрпНрод родро▓рпИрокрпНрокрпБроХрпНроХрпБроЪрпН роЪрпЖро▓рпНро▓ро▓ро╛роорпН.",
        "next": "роЕроЯрпБродрпНродродрпБ",
        "previous": "роорпБроирпНродрпИропродрпБ",
        "back": "роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБроХрпНроХрпБ родро┐ро░рпБроорпНрокро╡рпБроорпН",
        "speak_button": "ЁЯФК рокро╛роЯродрпНродрпИ роХрпЗроЯрпНроХро╡рпБроорпН",
        "mic_button": "ЁЯОЩя╕П рокрпЛроЯрпН роЙроЯройрпН рокрпЗроЪро╡рпБроорпН",
    },
    "р▓Хр▓ир│Нр▓ир▓б (Kannada)": {
        "welcome": "р▓╕р│Нр▓╡р▓╛р▓Чр▓д",
        "learning_material": "р▓Ер▓зр│Нр▓пр▓пр▓и р▓╡р▓┐р▓╖р▓п",
        "topic_intro": "р▓И р▓╡р▓┐р▓╖р▓пр▓Хр│Нр▓Хр│Ж р▓╕р▓Вр▓мр▓Вр▓зр▓┐р▓╕р▓┐р▓ж р▓╡р│Ар▓бр▓┐р▓пр│Кр▓Чр▓│р│Б, р▓Яр▓┐р▓кр│Нр▓кр▓гр▓┐р▓Чр▓│р│Б р▓Ер▓ер▓╡р▓╛ р▓Хр│Нр▓╡р▓┐р▓Ьр│НтАМр▓Чр▓│р│Б р▓Зр▓▓р│Нр▓▓р▓┐ р▓Хр▓╛р▓гр▓┐р▓╕р│Бр▓др│Нр▓др▓╡р│Ж.",
        "take_quiz": "р▓Хр│Нр▓╡р▓┐р▓Ьр│Н р▓кр│Нр▓░р▓╛р▓░р▓Вр▓нр▓┐р▓╕р▓┐",
        "quiz_completed": "р▓Хр│Нр▓╡р▓┐р▓Ьр│Н р▓кр│Вр▓░р│Нр▓гр▓Чр│Кр▓Вр▓бр▓┐р▓жр│Ж! р▓ор│Бр▓Вр▓жр▓┐р▓и р▓╡р▓┐р▓╖р▓пр▓Хр│Нр▓Хр│Ж р▓╣р│Лр▓Чр▓мр▓╣р│Бр▓жр│Б.",
        "next": "р▓ор│Бр▓Вр▓жр▓┐р▓ир▓жр│Б",
        "previous": "р▓╣р▓┐р▓Вр▓жр▓┐р▓ир▓жр│Б",
        "back": "р▓бр│Нр▓пр▓╛р▓╢р│НтАМр▓мр│Лр▓░р│Нр▓бр│НтАМр▓Чр│Ж р▓╣р▓┐р▓Вр▓др▓┐р▓░р│Бр▓Чр▓┐",
        "speak_button": "ЁЯФК р▓кр▓╛р▓ар▓╡р▓ир│Нр▓ир│Б р▓Хр│Зр▓│р▓┐",
        "mic_button": "ЁЯОЩя╕П р▓мр▓╛р▓Яр│НтАМр▓ир│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓ор▓╛р▓др▓ир▓╛р▓бр▓┐",
    }
}

# ------------------------------------
# ЁЯОз TTS FUNCTION
# ------------------------------------
def get_tts_lang(language):
    mapping = {
        "english": "en",
        "р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)": "te",
        "рд╣рд┐рдВрджреА (Hindi)": "hi",
        "родрооро┐ро┤рпН (Tamil)": "ta",
        "р▓Хр▓ир│Нр▓ир▓б (Kannada)": "kn",
    }
    return mapping.get(language, "en")

def speak_text(text, language):
    """Generate voice from text."""
    lang_code = get_tts_lang(language)
    tts = gTTS(text=text, lang=lang_code)
    audio_bytes = io.BytesIO()
    tts.write_to_fp(audio_bytes)
    audio_bytes.seek(0)
    st.audio(audio_bytes, format="audio/mp3")

# ------------------------------------
# ЁЯУШ PAGE HEADER
# ------------------------------------
chapter_name, topic_index, topic_title = st.session_state.selected_topic
t = translations[st.session_state.language]

st.markdown(
    f"""
    <div style="background-color:#0f1724; padding:18px; border-radius:10px; color:white;">
        <h2>ЁЯСЛ {t['welcome']}, {st.session_state.user_name}!</h2>
        <p>ЁЯУШ {chapter_name} | ЁЯзй {topic_title}</p>
    </div>
    """,
    unsafe_allow_html=True,
)

# ------------------------------------
# ЁЯУЪ LEARNING MATERIAL
# ------------------------------------
st.markdown(f"### ЁЯУЦ {t['learning_material']}")
st.info(t["topic_intro"])

col1, col2 = st.columns([1, 1])
with col1:
    if st.button(t["speak_button"], key="speaker_button"):
        speak_text(t["topic_intro"], st.session_state.language)
with col2:
    st.write("")  # spacing

# ------------------------------------
# ЁЯза QUIZ SECTION
# ------------------------------------
st.write("---")
st.subheader("ЁЯза " + t["take_quiz"])

if not st.session_state.quiz_completed:
    if st.button("ЁЯЪА Start Quiz"):
        with st.expander("ЁЯУЛ Quiz", expanded=True):
            answer = st.radio(
                "What is the main goal of finance?",
                ["A) Spending money", "B) Managing money efficiently", "C) Avoiding all investments"],
                key="quiz_radio"
            )
            if st.button("тЬЕ Submit Quiz"):
                if answer == "B) Managing money efficiently":
                    st.session_state.quiz_completed = True
                    st.success(t["quiz_completed"])
                else:
                    st.error("тЭМ Try again.")
else:
    st.success(t["quiz_completed"])

# ------------------------------------
# ЁЯТм CHATBOT WITH VOICE (MIC + SPEAKER in input ribbon)
# ------------------------------------
st.write("---")
st.markdown("### ЁЯдЦ Chatbot Assistant")

# Chat history display
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.write(msg["content"])

# --- Chat input ribbon with mic and speaker ---
chat_col1, chat_col2, chat_col3 = st.columns([8, 1, 1])

# Text input box
with chat_col1:
    user_input = st.chat_input("Ask your question...")

# Mic button
with chat_col2:
    mic_audio = mic_recorder(
        start_prompt="ЁЯОд",
        stop_prompt="ЁЯЫС",
        just_once=True,
        use_container_width=True,
        key="chat_mic",
    )

# Speaker button
with chat_col3:
    if st.button("ЁЯФК", key="chat_speaker"):
        if st.session_state.messages:
            speak_text(st.session_state.messages[-1]["content"], st.session_state.language)
        else:
            st.warning("No response to speak yet.")

# --- Process input or voice ---
if mic_audio:
    st.audio(mic_audio["bytes"])
    st.success("ЁЯОЩя╕П Voice captured successfully!")

if user_input:
    st.session_state.messages.append({"role": "user", "content": user_input})
    reply = f"That's an insightful question about {topic_title}!"
    st.session_state.messages.append({"role": "assistant", "content": reply})
    st.rerun()

# ------------------------------------
# ЁЯЪк NAVIGATION
# ------------------------------------
st.write("---")
col1, col2, col3 = st.columns([1, 1, 2])
col1.button(f"тмЕя╕П {t['previous']}")
col2.button(f"тЮбя╕П {t['next']}", disabled=not st.session_state.quiz_completed)
col3.button(f"ЁЯПа {t['back']}")


#To Do
# reply = f"That's a great question about {topic_title}! HereтАЩs a short explanation..."
# with something like:

# python
# Copy code
# client = OpenAI(api_key="YOUR_KEY")
# resp = client.chat.completions.create(
#     model="gpt-4o-mini",
#     messages=st.session_state.messages
# )
# reply = resp.choices[0].message.content
